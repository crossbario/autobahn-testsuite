name: main

on:
  push:
    branches: [master]
    tags: ["v*"]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Verify Just
        run: |
          just --version

      - name: Install system dependencies & Python 2.7
        run: |
          just install-system-deps

      - name: Create virtualenv and build package
        run: |
          just build
          ls -la dist/

      - name: Test installation
        run: |
          just test-version
          just test-install

      # - name: Build Docker image
      #   run: |
      #     cd docker
      #     docker build \
      #       --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
      #       --build-arg AUTOBAHN_TESTSUITE_VERSION=25.10.1 \
      #       --build-arg AUTOBAHN_TESTSUITE_VCS_REF=${{ github.sha }} \
      #       -t crossbario/autobahn-testsuite:latest \
      #       .

      #     # Test Docker image
      #     docker run --rm crossbario/autobahn-testsuite:latest wstest --help

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dist
      #     path: autobahntestsuite/dist/

      # - name: Create GitHub release (on tag push)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: autobahntestsuite/dist/*
      #     generate_release_notes: true
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish to PyPI (on tag push)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      #   run: |
      #     cd autobahntestsuite
      #     ../.venvs/py27/bin/pip install twine
      #     ../.venvs/py27/bin/twine upload dist/*

      # - name: Login to Docker Hub (on tag push)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Extract version from tag
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   id: get_version
      #   run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # - name: Build and push Docker image (on tag push)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   run: |
      #     cd docker

      #     # Build with proper tags
      #     docker build \
      #       --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
      #       --build-arg AUTOBAHN_TESTSUITE_VERSION=${{ steps.get_version.outputs.VERSION }} \
      #       --build-arg AUTOBAHN_TESTSUITE_VCS_REF=${{ github.sha }} \
      #       -t crossbario/autobahn-testsuite:${{ steps.get_version.outputs.VERSION }} \
      #       -t crossbario/autobahn-testsuite:latest \
      #       .

      #     # Push both tags
      #     docker push crossbario/autobahn-testsuite:${{ steps.get_version.outputs.VERSION }}
      #     docker push crossbario/autobahn-testsuite:latest

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Build documentation
        run: just docs

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

      - name: Deploy to Read the Docs
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Documentation built. RTD will auto-deploy on tag push."
          echo "Make sure RTD webhook is configured for this repository."
