name: main

on:
  push:
    branches: [master]
    tags: ["v*"]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  DOT_LOCAL: ${{ env.HOME }}/.local
  UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
  PY27_PREFIX: ${{ env.HOME }}/.local/python2.7
  PY27_VENV: ${{ github.workspace }}/.venvs/cpy27
  TOOLS_VENV: ${{ github.workspace }}/.venvs/cpy314

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ${HOME}/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify Just
        run: |
          which just
          just --version

      # ðŸ§© Restore cached Python 2.7 install if available
      - name: Cache local CPython 2.7 install
        id: cache-python2
        uses: actions/cache@v4
        with:
          path: ${{ env.PY27_PREFIX }}
          key: cpy27-${{ runner.os }}-${{ hashFiles('justfile') }}
          restore-keys: |
            cpy27-${{ runner.os }}-

      # ðŸ§© Build only if cache was missed
      - name: Build CPython 2.7 from source
        if: steps.cache-python2.outputs.cache-hit != 'true'
        # Build & install Python 2.7 and package dependencies (pip2 & virtualenv)
        run: |
          just install-python2-deps
          echo "${{ env.PY27_PREFIX }}/bin" >> $GITHUB_PATH

      # ðŸ§© Verify it works (both cached and fresh builds)
      - name: Test Python 2.7 binary
        run: |
          which python2
          python2 --version

      # ðŸ§© Restore venv with (only) dependencies
      - name: Restore CPython 2.7 venv with (only) dependencies
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ${{ env.PY27_VENV }}
          key: cpy27-venv-${{ runner.os }}-${{ hashFiles('autobahntestsuite/requirements.txt') }}
          restore-keys: |
            cpy27-venv-${{ runner.os }}-

      # ðŸ§© Create venv if missing
      - name: Create venv
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          just create-venv

      # ðŸ§© Install package dependencies (only)
      # You may need to adjust your justfile slightly to have a "install-deps" target
      - name: Install dependencies into venv
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          just install-deps

      # Save venv cache after deps installed
      - name: Save venv cache (dependencies only)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.PY27_VENV }}
          key: cpy27-venv-${{ runner.os }}-${{ hashFiles('autobahntestsuite/requirements.txt') }}

      # ðŸ§© Install your package into the venv
      - name: Install package
        run: |
          just install

      # ðŸ§© Build the package
      - name: Build distribution
        run: |
          just build

      # ðŸ§© Test installation
      - name: Test installation
        run: |
          just test-version
          just test-wstest

      # ðŸ§© List package artifacts
      - name: List package artifacts
        run: |
          ls -la autobahntestsuite/dist/

      # ðŸ§© Upload build artifact
      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: autobahn-testsuite-dist
          path: autobahn-testsuite/dist/

  docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codeq
        uses: actions/checkout@v4

      - name: Install Just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ${HOME}/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install uv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify toolchain installation
        run: |
          which just
          just --version
          which uv
          uv --version

      # ðŸ§© Restore cached Python 3 tools venv if available
      - name: Cache tools virtualenv
        id: cache-tools-venv
        uses: actions/cache@v4
        with:
          path: ${{ env.TOOLS_VENV }}
          key: tools-venv-${{ runner.os }}-${{ hashFiles('justfile', 'requirements-dev.txt') }}
          restore-keys: |
            tools-venv-${{ runner.os }}-

      # ðŸ§± Create the tools venv only if cache is missing
      - name: Create Python 3 venv (using uv) with AutobahnTestsuite tools
        if: steps.cache-tools-venv.outputs.cache-hit != 'true'
        run: just tools-venv

      - name: Build documentation (using Sphinx)
        run: just docs

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autobahn-testsuite-docs
          path: docs/_build/html/
